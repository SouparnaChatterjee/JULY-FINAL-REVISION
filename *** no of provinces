class Solution {
private:
    void dfs(int node, int n, vector<int>& vis, vector<vector<int>>& isConnected) {
        vis[node] = 1;
        for (int i = 0; i < n; i++) {
            if (isConnected[node][i] && !vis[i]) {
                dfs(i, n, vis, isConnected); // Correctly pass the adjacent node i
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int provinces = 0;
        int n = isConnected.size();
        vector<int> vis(n, 0);
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                dfs(i, n, vis, isConnected); // Consistent parameter order
                provinces++;
            }
        }
        return provinces;
    }
};
